package game;

import java.awt.Color;

/**
 * The purpose of the lotus class is to contain all the logic for 
 * the actual game. It starts the game by adding both players and sets
 * the current players turn. It also creates the game board.
 *<p>
 * Useable Methods: getCurrentPlayer() and getWinner()
 * @author Sean
 *
 */

public class Lotus {
	
		
	private Player _player1;
	private Player _player2;
	private Player _currentPlayersTurn;
	private Board _gameBoard;
	private Player _winner;
	/**
	 * Constructor calls startGame() method in order to
	 * initiate the game.
	 * @author Sean
	 */
	public Lotus(){
		startGame();
	}
	/**
	 * Method creates two players.
	 * <p>
	 * Player 1 as color Red
	 * <p>
	 * Player 2 as color Blue
	 * @author Sean
	 */
	public void addPlayers(){
		_player1 = new Player(Color.red);
		_player2 = new Player(Color.blue);		
	}
	/**
	 * Method adds players, sets who goes first, and 
	 * creates the game board.
	 * @author Sean
	 */
	public void startGame(){
		addPlayers();
		setCurrentPlayersTurn(_player1);
		_gameBoard = new Board(_player1, _player2);		
	}
	/**
	 * Method check to see if player has all of a players pieces
	 * are off the board.
	 * <p>
	 * If so, sets the winner to that player.
	 * @author Sean
	 */
	public void endGame(){
		int allOfPlayersPieces = 10;
		if(_gameBoard.getEndSquare().getPlayersEndStack(_player1) == allOfPlayersPieces){
			setWinner(_player1);				
		}
		else if(_gameBoard.getEndSquare().getPlayersEndStack(_player2) == allOfPlayersPieces){
			setWinner(_player2);			
		}		
	}
<<<<<<< Lotus.java
	
	public boolean canMovePiece(Piece piece){
		if(piece.getPlayer() == _currentPlayersTurn){
			return true;
		}
=======
	/**
	 * Method checks to see whether the piece is a valid move, if it is not
	 * then the method checks to see if the player has an available move.
	 * @param piece at the top of the square player is trying to move from
	 * @return true if piece belongs to player
	 * <p>
	 * true if player does not have a piece on the board
	 * <p>
	 * false if player has a has a piece on the board and piece does not belong to them.
	 * @author Sean
	 */
	public boolean hasAvailableMove(){
>>>>>>> 1.13
		Square[] squaresOnBoard = _gameBoard.getSquareArray();
		boolean hasPiece = false;
		for(int i = 0; i < squaresOnBoard.length; i++){
			if(squaresOnBoard[i].getPiece().getPlayer() == _currentPlayersTurn){
				hasPiece = true;
			}			
		}
		if(_gameBoard.getStartArea().hasPiece(_currentPlayersTurn)){
			hasPiece = true;
		}
		return !hasPiece;		
				
	}
	/**
	 * Method moves piece from its origin to chosen square as long as it is either 
	 * a valid move or player has no other move.
	 * @param startSquare
	 * @param nextSquare
	 * @return true if move was valid
	 * <p>
	 * false if move was not valid
	 * @author Sean
	 */
	
	public boolean movePiece(Square startSquare, Square endSquare){
		
		if(canMovePiece(startSquare.getPiece())){
			Square temp = startSquare;
			boolean found = false;
			for(int i = 0; i < startSquare.getHeight(); i++){
				if(temp == endSquare){
					found = true;
					break;
				}
				if(startSquare.isForwardSquare()){
					temp = temp.getNextSquare();
				}
				else{
					/*temp = temp.getPreviousSquares();*/
				}
								
			}
			if(found){
				Piece piece = startSquare.removePiece();
				piece.setLastSquare(startSquare);
				endSquare.addPiece(piece);
			}
			else{
				return false;
			}
		}
		else{
			return false;
		}	
		endGame();
		if(getWinner() == null){
			if(getCurrentPlayersTurn() == _player1){
				setCurrentPlayersTurn(_player2);
			}
			else{
				setCurrentPlayersTurn(_player1);
			}	
		}
		return true;
	}	
	
	public Player getCurrentPlayersTurn() {
		return _currentPlayersTurn;
	}

	public void setCurrentPlayersTurn(Player player) {
		_currentPlayersTurn = player;
	}

	public Player getWinner() {
		return _winner;
	}

	public void setWinner(Player winner) {
		_winner = winner;
	}

}
