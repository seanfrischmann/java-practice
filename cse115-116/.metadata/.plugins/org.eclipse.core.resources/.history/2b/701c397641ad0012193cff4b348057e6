package model;

import java.awt.Color;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Random;

import ui.Driver;

public class Board {
	
	private ActionListener _listener;
	
	private Position[] _top;
	private Position[] _bottom;
	private Position[] _center;
	private ArrayList<StartPosition[]> _startPositions = new ArrayList<StartPosition[]>();	
	private ArrayList<Integer> _randomPosition = new ArrayList<Integer>();
	
	
	private int _numberOfPlayers = (Driver.getArgs().length) - 1;
	private ArrayList<Player> _playerArray = new ArrayList<Player>();
	private Player _currentPlayersTurn;
	private Player _winner = null;
	private int _startingPlayer = 0;

	
	
	public void setActionListener(ActionListener al) {
		_listener = al;
	}
	
	public void notifyOfChange() {
		if (_listener != null) {
			_listener.actionPerformed(null);
		}
	}
	
	public Board() {
		addPlayers(_numberOfPlayers);
		_currentPlayersTurn = _playerArray.get(_startingPlayer);
		createPositions();		
		
		if(_numberOfPlayers == 2){
			StartPosition[] redStart = new StartPosition[4];			
			StartPosition[] blueStart = new StartPosition[4];			
			createStartArea(redStart, "R", _playerArray.get(0));
			_startPositions.add(redStart);
			createStartArea(blueStart, "B", _playerArray.get(1));
			_startPositions.add(blueStart);
		}
		if(_numberOfPlayers ==3){
			StartPosition[] redStart = new StartPosition[4];			
			StartPosition[] blueStart = new StartPosition[4];			
			createStartArea(redStart, "R", _playerArray.get(0));
			_startPositions.add(redStart);
			createStartArea(blueStart, "B", _playerArray.get(1));
			_startPositions.add(blueStart);
			StartPosition[] greenStart = new StartPosition[4];
			createStartArea(greenStart, "G", _playerArray.get(2));
			_startPositions.add(greenStart);
		}
		if(_numberOfPlayers >= 4){
			StartPosition[] redStart = new StartPosition[3];			
			StartPosition[] blueStart = new StartPosition[3];			
			createStartArea(redStart, "R", _playerArray.get(0));
			_startPositions.add(redStart);
			createStartArea(blueStart, "B", _playerArray.get(1));
			_startPositions.add(blueStart);
			StartPosition[] greenStart = new StartPosition[3];
			createStartArea(greenStart, "G", _playerArray.get(2));
			_startPositions.add(greenStart);
			StartPosition[] whiteStart = new StartPosition[3];
			createStartArea(whiteStart, "W", _playerArray.get(3));
			_startPositions.add(whiteStart);
		}
		if(_numberOfPlayers >= 5){
			StartPosition[] blackStart = new StartPosition[3];
			createStartArea(blackStart, "K", _playerArray.get(4));
			_startPositions.add(blackStart);
		}
		if(_numberOfPlayers == 6){
			StartPosition[] yellowStart = new StartPosition[3];
			createStartArea(yellowStart, "Y", _playerArray.get(5));
			_startPositions.add(yellowStart);
		}		
	}
	public void randomNumber(int numbers, int size, ArrayList<Integer> arrayList){
		Random _rand = new Random();
		for(int i = 0; i < numbers; i++){
			boolean failTest = true;
			while(failTest){
				int test = _rand.nextInt(size);
				if(!arrayList.contains(test)){
					arrayList.add(test);				
					failTest = false;
				}
			}
		}						
	}
	public void createPositions(){	
		_top = new Position[14];
		_bottom = new Position[14];
		_center = new Position[14];
		randomNumber(3, 14, _randomPosition);
		for(int i=0; i<3; i++){
			ArrayList<Integer> randomTrack = new ArrayList<Integer>();
			randomNumber(1, 3, randomTrack);
			if(randomTrack.get(0) == 0){
				if(_randomPosition.get(0) == i){
					_top[i] = (new Position(2, i, this));
					_bottom[i] = (new Position(0, i, this));
					_center[i]  = (new Position(0, i, this));
				}
				else if(_randomPosition.get(1) == i){
					_top[i]  = (new Position(5, i, this));
					_bottom[i] = (new Position(0, i, this));
					_center[i] = (new Position(0, i, this));
				}
				else if(_randomPosition.get(2) == i){
					_top[i]  = (new BackwardsPosition(0, i, this));
					_bottom[i] = (new Position(0, i, this));
					_center[i] = (new Position(0, i, this));
				}
				else{
					_top[i]  = (new Position(0, i, this));
					_bottom[i] = (new Position(0, i, this));
					_center[i] = (new Position(0, i, this));
				}
			}
			else if(randomTrack.get(0) == 1){
				if(_randomPosition.get(0) == i){
					_top[i] = (new Position(0, i, this));
					_bottom[i] = (new Position(2, i, this));
					_center[i]  = (new Position(0, i, this));
				}
				else if(_randomPosition.get(1) == i){
					_top[i]  = (new Position(0, i, this));
					_bottom[i] = (new Position(5, i, this));
					_center[i] = (new Position(0, i, this));
				}
				else if(_randomPosition.get(2) == i){
					_top[i]  = (new Position(0, i, this));
					_bottom[i] = (new BackwardsPosition(0, i, this));
					_center[i] = (new Position(0, i, this));
				}
				else{
					_top[i]  = (new Position(0, i, this));
					_bottom[i] = (new Position(0, i, this));
					_center[i] = (new Position(0, i, this));
				}
			}
			else if(randomTrack.get(0) == 2){
				if(_randomPosition.get(0) == i){
					_top[i] = (new Position(0, i, this));
					_bottom[i] = (new Position(0, i, this));
					_center[i]  = (new Position(2, i, this));
				}
				else if(_randomPosition.get(1) == i){
					_top[i]  = (new Position(0, i, this));
					_bottom[i] = (new Position(0, i, this));
					_center[i] = (new Position(5, i, this));
				}
				else if(_randomPosition.get(2) == i){
					_top[i]  = (new Position(0, i, this));
					_bottom[i] = (new Position(0, i, this));
					_center[i] = (new BackwardsPosition(0, i, this));
				}
				else{
					_top[i]  = (new Position(0, i, this));
					_bottom[i] = (new Position(0, i, this));
					_center[i] = (new Position(0, i, this));
				}
			}
		}
		for(int i=3; i<14; i++){
			if(_randomPosition.get(0) == i){
				_top[i] = (new Position(2, i, this));
				_bottom[i] = _top[i];
				_center[i] = _top[i];
			}
			else if(_randomPosition.get(1) == i){
				_top[i]  = (new Position(5, i, this));
				_bottom[i] = _top[i];
				_center[i] = _top[i];
			}
			else if(_randomPosition.get(2) == i){
				_top[i]  = (new BackwardsPosition(0, i, this));
				_bottom[i] = _top[i];
				_center[i] = _top[i];
			}
			else{
				_top[i]  = (new Position(0, i, this));
				_bottom[i] = _top[i];
				_center[i] = _top[i];
			}
		}
	}
	private void addPlayers(int numberOfPlayers){		
		if(_numberOfPlayers == 2){
			_playerArray.add(new Player(Color.red, Driver.getArgs()[1]));
			_playerArray.add(new Player(Color.blue, Driver.getArgs()[2]));
		}
		if(_numberOfPlayers == 3){
			_playerArray.add(new Player(Color.red, Driver.getArgs()[1]));
			_playerArray.add(new Player(Color.blue, Driver.getArgs()[2]));
			_playerArray.add(new Player(Color.green, Driver.getArgs()[3]));
		}
		if(_numberOfPlayers == 4){
			_playerArray.add(new Player(Color.red, Driver.getArgs()[1]));
			_playerArray.add(new Player(Color.blue, Driver.getArgs()[2]));
			_playerArray.add(new Player(Color.green, Driver.getArgs()[3]));
			_playerArray.add(new Player(Color.white, Driver.getArgs()[4]));
		}
		if(_numberOfPlayers == 5){
			_playerArray.add(new Player(Color.red, Driver.getArgs()[1]));
			_playerArray.add(new Player(Color.blue, Driver.getArgs()[2]));
			_playerArray.add(new Player(Color.green, Driver.getArgs()[3]));
			_playerArray.add(new Player(Color.white, Driver.getArgs()[4]));
			_playerArray.add(new Player(Color.black, Driver.getArgs()[5]));
		}
		if(_numberOfPlayers == 6){
			_playerArray.add(new Player(Color.red, Driver.getArgs()[1]));
			_playerArray.add(new Player(Color.blue, Driver.getArgs()[2]));
			_playerArray.add(new Player(Color.green, Driver.getArgs()[3]));
			_playerArray.add(new Player(Color.white, Driver.getArgs()[4]));
			_playerArray.add(new Player(Color.black, Driver.getArgs()[5]));
			_playerArray.add(new Player(Color.yellow, Driver.getArgs()[6]));
		}
	}
	public boolean canMoveForward(Piece p){
		if(p.getPlayer() == _currentPlayersTurn){
			return true;
		}
		ArrayList<Position> board = boardArray();
		boolean hasPiece = false;
		for(int i = 0; i < board.size(); i++){
			Piece topPiece = board.get(i).peekTop();
			if(topPiece != null && topPiece.getPlayer() == _currentPlayersTurn){
				hasPiece = true;
			}			
		}
		return !hasPiece;
	}
	private void createStartArea(StartPosition[] startPosition, String s, Player p){
		for (int i=0; i < startPosition.length; i++) {
			startPosition[i] = (new StartPosition(0,i,this));
			populate(startPosition[i], s, p, i+1);
		}
	}

	private void populate(Position pos, String s, Player p, int howMany) {
		for (int i=0; i<howMany; i++) {
			pos.putOn(new Piece(s,p, pos));
		}
	}
	
	public ArrayList<Position> boardArray(){
		ArrayList<Position> temp = new ArrayList<Position>();
		for (int i=0; i<_startPositions.get(0).length; i++) {
			for(int j=0; j<_startPositions.size(); j++){
				temp.add(_startPositions.get(j)[i]);
			}
		}		
		for (int i=0; i<3; i++) {
			temp.add(_top[i]);
			temp.add(_bottom[i]);
			temp.add(_center[i]);						
		}
		for (int i=3; i<14; i++) {
			temp.add(_bottom[i]);
		}
		return temp;
	}

	public ArrayList<String> getBoard() {
		ArrayList<String> temp = new ArrayList<String>();
		for (int i=0; i<_startPositions.get(0).length; i++) {
			for(int j=0; j<_startPositions.size(); j++){
				temp.add(_startPositions.get(j)[i].toString());
			}
		}		
		for (int i=0; i<3; i++) {
			temp.add(_top[i].toString());
			temp.add(_bottom[i].toString());
			temp.add(_center[i].toString());						
		}
		for (int i=3; i<14; i++) {
			temp.add(_bottom[i].toString());
		}
		return temp;
	}
	public StartPosition[] getStartPositionArray(int i){
		return _startPositions.get(i);
	}
	public int getStartPositionArraySize(){
		return _startPositions.size();
	}
	public StartPosition getStartPosition(int startPositionArray, int startPosition){
		return _startPositions.get(startPositionArray)[startPosition];
	}
	
	public Position getLeft(int i) { return _top[i]; }
	public Position getRight(int i) { return _bottom[i]; }
	public Position getCenter(int i){ return _center[i];}
	public Position getCommon(int i) { return _bottom[i]; }

	public Position[] leftTrack() {
		return _top;
	}

	public Position[] rightTrack() {
		return _bottom;
	}
	public Position[] centerTrack(){
		return _center;
	}

	public int getNumberOfPlayers() {
		return _numberOfPlayers;
	}
	
	public ArrayList<Player> getPlayerArray(){
		return _playerArray;
	}

	public Player getCurrentPlayersTurn() {
		return _currentPlayersTurn;
	}

	public void setNextPlayersTurn() {
		if(_currentPlayersTurn == _playerArray.get(_playerArray.size()-1)){
			_startingPlayer = 0;			
		}
		else{
			_startingPlayer++;			
		}
		_currentPlayersTurn = _playerArray.get(_startingPlayer);
	}
	
	public Player getWinner(){
		if(_numberOfPlayers < 4){
			for(int i=0; i<_playerArray.size(); i++){
				if(_playerArray.get(i).getScore() == 10){
					_winner = _playerArray.get(i);
					return _winner;
				}
			}	
		}
		else{
			for(int i=0; i<_playerArray.size(); i++){
				if(_playerArray.get(i).getScore() == 6){
					_winner = _playerArray.get(i);
					return _winner;
				}
			}
		}
		return _winner;
	}
}
